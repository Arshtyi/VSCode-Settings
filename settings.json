{
    // =========================================================================
    // 1. General UI & Window
    // Controls the overall appearance and behavior of the VSCode window.
    // =========================================================================
    "window.newWindowProfile": "默认", // Profile to use for new windows.
    "window.dialogStyle": "custom", // Use custom dialog style for windows.
    "window.restoreFullscreen": true, // Restore fullscreen state on application launch.
    "security.workspace.trust.untrustedFiles": "open", // Open untrusted files without asking for workspace trust.

    // =========================================================================
    // 2. Workbench Appearance
    // Customizes the look and feel of the workbench, including colors, icons, and layout.
    // =========================================================================
    "workbench.colorTheme": "Winter is Coming (Dark Blue)", // Sets the color theme for the UI.
    "workbench.iconTheme": "material-icon-theme", // Sets the file icon theme in the explorer.
    "workbench.productIconTheme": "bongocat", // Sets the theme for icons throughout the UI (e.g., activity bar).
    "workbench.list.smoothScrolling": true, // Enables smooth scrolling in lists and trees.
    "workbench.list.horizontalScrolling": true, // Enables horizontal scrolling in lists and trees.
    "workbench.tree.indent": 40, // Sets the indentation for tree widgets like the file explorer.
    "workbench.tree.renderIndentGuides": "always", // Always shows indentation guides in tree views.
    "workbench.tree.stickyScrollMaxItemCount": 10, // Sets the maximum number of sticky scroll items in tree views.
    "workbench.editor.showTabs": "multiple", // Only shows the tab bar when multiple editors are open.
    "workbench.editor.wrapTabs": true, // Wraps editor tabs instead of showing a scrollbar.
    "workbench.editor.highlightModifiedTabs": true, // Highlights tabs of files with unsaved changes.
    "workbench.editor.scrollToSwitchTabs": true, // Scrolls the tab list to make the active tab visible.
    "workbench.editor.pinnedTabsOnSeparateRow": true, // Displays pinned tabs in a separate row above other tabs.
    "workbench.startupEditor": "none", // Prevents opening a "Welcome" or startup editor on launch.
    "workbench.commandPalette.preserveInput": true, // Keeps the previous input in the Command Palette.
    "workbench.settings.showAISearchToggle": true, // Shows the AI search toggle button in the settings UI.
    "workbench.settings.applyToAllProfiles": [
        // Settings that will apply across all user profiles.
        "editor.fontFamily",
        "workbench.list.horizontalScrolling"
    ],

    // =========================================================================
    // 3. Editor: Core Functionality
    // Core settings for text editor behavior, navigation, and interaction.
    // =========================================================================
    "editor.wordWrap": "on", // Enables automatic line wrapping.
    "editor.mouseWheelZoom": true, // Allows changing font size with Ctrl + Mouse Wheel.
    "editor.tabCompletion": "on", // Enables completing snippets with the Tab key.
    "editor.foldingImportsByDefault": true, // Automatically folds import statements when a file is opened.
    "editor.definitionLinkOpensInPeek": true, // Opens 'Go to Definition' results in a peek view.
    "editor.sharedViewState": true, // Shares cursor position and selection between split editors of the same file.
    "editor.preferHistoryBasedLanguageDetection": true, // Uses file history to improve language detection accuracy.
    "editor.stickyScroll.maxLineCount": 20, // Sets the maximum number of lines for the sticky scroll feature.
    "editor.stickyTabStops": true, // Makes tab stops sticky, aiding in consistent indentation.

    // =========================================================================
    // 4. Editor: Font & Visual Appearance
    // Settings for fonts, cursor style, whitespace rendering, and other visual elements.
    // =========================================================================
    "editor.fontSize": 14, // Sets the editor font size in pixels.
    "editor.fontFamily": "'Fira Code','Maple Mono','Cousine Nerd Font','JetBrains Mono'", // Specifies the font family, with fallbacks.
    "editor.fontLigatures": true, // Enables font ligatures (e.g., '!=' becomes '≠').
    "editor.smoothScrolling": true, // Enables a smooth scrolling animation.
    "editor.cursorStyle": "line", // Sets the cursor style.
    "editor.cursorBlinking": "smooth", // Sets the cursor blinking animation style.
    "editor.cursorSmoothCaretAnimation": "on", // Enables smooth animation for caret movement.
    "editor.renderWhitespace": "all", // Renders all whitespace characters (spaces, tabs).
    "editor.renderControlCharacters": true, // Renders control characters.
    "editor.guides.bracketPairs": "active", // Highlights the active bracket pair guides.
    "editor.minimap.renderCharacters": false, // Shows blocks of color in the minimap instead of actual characters.
    "editor.rulers": [], // Disables vertical rulers in the editor.
    "editor.hover.enabled": false, // Disables the editor hover that shows information on mouse-over.

    // =========================================================================
    // 5. Editor: Formatting & Saving
    // Controls automatic formatting, saving behavior, and whitespace management.
    // =========================================================================
    "editor.defaultFormatter": "esbenp.prettier-vscode", // Sets Prettier as the default formatter for all languages.
    "editor.formatOnSave": true, // Automatically formats the file on save.
    "editor.formatOnPaste": true, // Automatically formats pasted content.
    "editor.formatOnType": true, // Automatically formats a line after typing.
    "editor.codeActionsOnSave": {
        // Defines actions to run when a file is saved.
        "source.fixAll.eslint": "explicit" // Runs ESLint's 'fixAll' command on save.
    },
    "files.autoSave": "onFocusChange", // Saves the file automatically when the editor loses focus.
    "files.autoSaveDelay": 200, // The delay in milliseconds before an auto-save is triggered.
    "files.trimTrailingWhitespace": true, // Removes trailing whitespace on save.
    "files.insertFinalNewline": true, // Inserts a newline at the end of the file on save.
    "files.trimFinalNewlines": true, // Removes extra newlines at the end of the file on save.
    "editor.tabSize": 4, // Sets the number of spaces for a tab character.
    "editor.detectIndentation": false, // Disables automatic detection of tab size and spaces.

    // =========================================================================
    // 6. Editor: IntelliSense & Suggestions
    // Configures code completion, inlay hints, and other smart features.
    // =========================================================================
    "editor.suggest.preview": true, // Shows a preview of the suggestion in the editor.
    "editor.inlineSuggest.edits.allowCodeShifting": "always", // Allows inline suggestions to modify code around the insertion point.
    "editor.inlineSuggest.edits.showCollapsed": true, // Shows inline suggestions in a collapsed state.
    "editor.inlineCompletionsAccessibilityVerbose": true, // Provides more detailed accessibility information for inline completions.
    "editor.inlayHints.padding": true, // Adds padding around inlay hints for better readability.
    "editor.inlayHints.fontFamily": "", // Uses the default editor font for inlay hints.

    // =========================================================================
    // 7. File Explorer & Management
    // Settings for the file explorer, file associations, and file nesting.
    // =========================================================================
    "explorer.confirmDelete": false, // Disables the confirmation dialog when deleting files.
    "explorer.compactFolders": true, // Collapses single-child folders into a single tree entry.
    "files.associations": {
        // Maps file patterns to specific language modes.
        "*.vue": "vue",
        "*.wpy": "vue",
        "*.wxml": "html",
        "*.wxss": "css"
    },
    "files.exclude": {
        // Hides files and folders from the explorer and search.
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/CVS": true,
        "**/.DS_Store": true,
        "**/*.js": { "when": "$(basename).ts" },
        "**/node_modules": true
    },
    "explorer.fileNesting.patterns": {
        // Defines how related files are nested under a parent file.
        "*.ts": "${capture}.js",
        "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
        "*.jsx": "${capture}.js",
        "*.tsx": "${capture}.ts",
        "tsconfig.json": "tsconfig.*.json",
        "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb, bun.lock",
        "*.sqlite": "${capture}.${extname}-*",
        "*.db": "${capture}.${extname}-*",
        "*.sqlite3": "${capture}.${extname}-*",
        "*.db3": "${capture}.${extname}-*",
        "*.sdb": "${capture}.${extname}-*",
        "*.s3db": "${capture}.${extname}-*"
    },
    "workbench.editorAssociations": {
        // Associates file types with specific editors.
        "*.copilotmd": "vscode.markdown.preview.editor",
        "file:/**/*.xlsx": "default",
        "file:/**/*.csv": "default",
        "*.xlsx": "cweijan.officeViewer",
        "*.cdb": "sqlite-viewer.option",
        "*.md": "cweijan.markdownViewer.optional"
    },

    // =========================================================================
    // 8. Search Configuration
    // Defines patterns to exclude from search results across the workspace.
    // =========================================================================
    "search.exclude": {
        // Excludes files and folders from search results.
        "**/node_modules": true,
        "**/bower_components": true,
        "**/target": true,
        "**/logs": true,
        "**/dist": true,
        "**/build": true,
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/.DS_Store": true,
        "**/.vscode": true,
        "**/.history": true,
        "**__pytcache__": true,
        "**/.pytest_cache": true,
        "**/.mypy_cache": true,
        "**/.vscode-test": true
    },

    // =========================================================================
    // 9. Source Control (Git & GitLens)
    // Settings for the integrated Git functionality and the GitLens extension.
    // =========================================================================
    "git.enableSmartCommit": true, // Commits all changes when there are no staged changes.
    "git.autofetch": true, // Automatically fetches from all remotes periodically.
    "git.confirmSync": false, // Disables confirmation before syncing with the remote repository.
    "git.openRepositoryInParentFolders": "never", // Prevents searching parent folders for a Git repository.
    "git.ignoreWindowsGit27Warning": true, // Suppresses the warning for outdated Git versions on Windows.
    "git.terminalAuthentication": false, // Disables using the terminal for Git authentication.
    "git.replaceTagsWhenPull": true, // Allows fetched tags to overwrite local tags on pull.
    "gitlens.detectNestedRepositories": true, // Allows GitLens to detect and work with nested repositories.

    // =========================================================================
    // 10. Integrated Terminal
    // Configuration for the built-in terminal.
    // =========================================================================
    "terminal.integrated.smoothScrolling": true, // Enables smooth scrolling in the terminal.
    "terminal.integrated.fontLigatures.enabled": true, // Enables font ligatures in the terminal.
    "terminal.integrated.fontFamily": "", // Uses the default font family for the terminal.
    "terminal.integrated.inheritEnv": false, // Prevents the terminal from inheriting VSCode's process environment.
    "terminal.integrated.defaultProfile.linux": "zsh", // Sets 'zsh' as the default shell for Linux.
    "terminal.integrated.commandsToSkipShell": ["matlab.interrupt"], // Commands that should be handled by VSCode instead of the shell.

    // =========================================================================
    // 11. Debugging
    // Settings for the debugger behavior across different languages.
    // =========================================================================
    "debug.javascript.defaultRuntimeExecutable": { "pwa-node": "node" }, // Sets the default runtime for JavaScript debugging.
    "debugpy.debugJustMyCode": true, // For Python, steps through user-written code only, skipping library code.
    "java.debug.settings.showStaticVariables": true, // Shows static variables in the Java debugger view.
    "java.debug.settings.showQualifiedNames": true, // Shows fully qualified names for classes in the Java debugger.

    // =========================================================================
    // 12. Remote Development & Sync
    // Settings for remote connections (SSH) and settings synchronization.
    // =========================================================================
    "remote.SSH.remotePlatform": {
        // Specifies the OS of remote SSH hosts to help select extensions.
        "LinuxServer": "linux",
        "154.44.26.17": "linux"
    },
    "remote.extensionKind": {
        // Specifies where certain extensions should run (UI vs. remote workspace).
        "GitHub.copilot": ["ui"],
        "GitHub.copilot-chat": ["ui"]
    },
    "remote.autoForwardPorts": false, // Disables automatic forwarding of ports from the remote machine.
    "settingsSync.ignoredSettings": ["-C_Cpp.clang_format_path"], // Prevents specific settings from being synced.
    "workbench.experimental.cloudChanges.partialMatches.enabled": true, // [Experimental] Enables partial matches for cloud changes.

    // =========================================================================
    // 13. Language-Specific Settings
    // Overrides for specific programming languages.
    // =========================================================================
    "[c]": { "editor.defaultFormatter": "ms-vscode.cpptools" }, // Sets the default formatter for C files.
    "[cpp]": { "editor.defaultFormatter": "ms-vscode.cpptools" }, // Sets the default formatter for C++ files.
    "[java]": { "editor.defaultFormatter": "redhat.java" }, // Sets the default formatter for Java files.
    "[tex]": {
        // Settings for TeX files.
        "editor.defaultFormatter": "James-Yu.latex-workshop",
        "editor.tabSize": 4
    },
    "[latex]": {
        // Settings for LaTeX files.
        "editor.defaultFormatter": "James-Yu.latex-workshop",
        "editor.formatOnSave": true,
        "editor.suggestSelection": "recentlyUsedByPrefix"
    },
    "[typst]": { "editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?" }, // Custom word separators for Typst files.
    "[typst-code]": { "editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?" }, // Custom word separators for Typst code blocks.

    // =========================================================================
    // 14. Extension: GitHub Copilot / Chat
    // Configuration for GitHub Copilot and its chat features.
    // =========================================================================
    "github.copilot.enable": { "*": true }, // Enables Copilot for all languages.
    "github.copilot.chat.scopeSelection": true, // Allows Copilot Chat to understand the selected code scope.
    "github.copilot.chat.editor.temporalContext.enabled": true, // Allows chat to use context from recently viewed files.
    "github.copilot.chat.edits.temporalContext.enabled": true, // Enables temporal context for code edits made via chat.
    "github.copilot.chat.generateTests.codeLens": true, // Shows a CodeLens shortcut to generate tests.
    "github.copilot.nextEditSuggestions.enabled": true, // Enables suggestions for the next logical code edit.
    "github.copilot.nextEditSuggestions.fixes": true, // Allows next edit suggestions to include fixes.
    "github.copilot.chat.codesearch.enabled": true, // Enables code search capabilities within Copilot Chat.
    "github.copilot.chat.search.keywordSuggestions": true, // Suggests relevant keywords during a chat search.
    "github.copilot.chat.agent.thinkingTool": true, // Enables the "thinking" tool indicator in the chat agent.
    "github.copilot.chat.languageContext.typescript.enabled": true, // Enables deeper TypeScript context for chat.
    "github.copilot.chat.languageContext.inline.typescript.enabled": true, // Enables inline TypeScript context for chat.
    "github.copilot.chat.languageContext.fix.typescript.enabled": true, // Enables TypeScript context for generating fixes.
    "chat.agent.enabled": true, // A general setting to enable the chat agent.
    "chat.editing.confirmEditRequestRetry": false, // Disables confirmation when retrying a chat edit request.
    "chat.mcp.enabled": true, // Enables a multi-chat processing feature.

    // =========================================================================
    // 15. Extension: GitHub Pull Requests
    // Settings for the GitHub Pull Requests and Issues extension.
    // =========================================================================
    "githubPullRequests.experimental.chat": true, // [Experimental] Enables chat features within the PR view.
    "githubPullRequests.experimental.notificationsView": true, // [Experimental] Enables a dedicated notifications view.
    "githubPullRequests.experimental.useQuickChat": true, // [Experimental] Enables a quick chat interface for PRs.
    "githubPullRequests.pullRequestDescription": "Copilot", // Sets the default description content for new PRs.
    "githubPullRequests.createOnPublishBranch": "never", // Prevents automatically creating a PR when publishing a new branch.

    // =========================================================================
    // 16. Extension: C/C++
    // Settings for the Microsoft C/C++ extension, including IntelliSense and formatting.
    // =========================================================================
    "C_Cpp.intelliSenseEngine": "default", // Uses the default IntelliSense engine.
    "C_Cpp.formatting": "clangFormat", // Specifies 'clang-format' as the formatting engine.
    "C_Cpp.default.configurationProvider": "ms-vscode.cpptools", // Sets the default configuration provider.
    "C_Cpp.copilotHover": "enabled", // Enables Copilot-powered suggestions on hover for C/C++ code.
    "C_Cpp.inlayHints.autoDeclarationTypes.enabled": true, // Shows inlay hints for types deduced with 'auto'.
    "C_Cpp.inlayHints.autoDeclarationTypes.showOnLeft": true, // Shows 'auto' type hints on the left of the variable.
    "C_Cpp.inlayHints.parameterNames.enabled": true, // Shows inlay hints for parameter names in function calls.
    "C_Cpp.inlayHints.referenceOperator.enabled": true, // Shows inlay hints for reference operators.
    "C_Cpp.inlayHints.referenceOperator.showSpace": true, // Adds a space after the reference operator hint.
    "C_Cpp.vcFormat.space.afterCastCloseParenthesis": true, // Inserts a space after the closing parenthesis of a C-style cast.
    "C_Cpp.vcFormat.space.beforeComma": true, // Inserts a space before a comma.
    "C_Cpp.vcFormat.space.beforeEmptySquareBrackets": true, // Inserts a space before empty square brackets.
    "C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "insert", // Inserts a space before the opening parenthesis of a function.
    "C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": true, // Inserts a space before the opening brace of an initializer list.
    "C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": true, // Inserts a space before the opening parenthesis of a lambda.
    "C_Cpp.vcFormat.space.beforeOpenSquareBracket": true, // Inserts a space before an opening square bracket.
    "C_Cpp.vcFormat.space.betweenEmptyBraces": true, // Inserts a space between empty braces {}.
    "C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": true, // Inserts a space between empty lambda brackets [].
    "C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": true, // Inserts a space between empty parentheses in a parameter list.
    "C_Cpp.vcFormat.space.betweenEmptySquareBrackets": true, // Inserts a space between empty square brackets [].
    "C_Cpp.vcFormat.space.insertAfterSemicolon": true, // Inserts a space after a semicolon.
    "C_Cpp.vcFormat.space.withinCastParentheses": true, // Inserts a space within the parentheses of a C-style cast.
    "C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": true, // Inserts a space within the parentheses of a control flow statement.
    "C_Cpp.vcFormat.space.withinExpressionParentheses": true, // Inserts a space within expression parentheses.
    "C_Cpp.vcFormat.space.withinLambdaBrackets": true, // Inserts a space within lambda brackets.
    "C_Cpp.vcFormat.space.withinParameterListParentheses": true, // Inserts a space within a parameter list's parentheses.
    "C_Cpp.vcFormat.space.withinSquareBrackets": true, // Inserts a space within square brackets.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "newLine", // Places the opening brace of a block on a new line.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "newLine", // Places the opening brace of a function on a new line.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "sameLine", // Places the opening brace of a lambda on the same line.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "newLine", // Places the opening brace of a namespace on a new line.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "sameLine", // Places the opening brace of a type on the same line.
    "C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": true, // Places the 'while' of a do-while loop on a new line.
    "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": true, // Keeps the closing brace of an empty function on the same line.
    "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": true, // Keeps the closing brace of an empty type on the same line.

    // =========================================================================
    // 17. Extension: Python
    // Configuration for the Python extension, including analysis and type checking.
    // =========================================================================
    "python.analysis.aiCodeActions": { "implementAbstractClasses": true }, // Enables AI-powered actions to implement abstract classes.
    "python.analysis.autoFormatStrings": true, // Automatically formats strings (e.g., converts to f-string).
    "python.analysis.autoImportCompletions": true, // Provides completions that will also add the required import statement.
    "python.analysis.completeFunctionParens": true, // Adds parentheses when completing function names.
    "python.analysis.typeCheckingMode": "standard", // Sets the level of static type checking.
    "python.analysis.inlayHints.callArgumentNames": "all", // Shows inlay hints for all argument names in function calls.
    "python.analysis.inlayHints.functionReturnTypes": true, // Shows inlay hints for the return types of functions.
    "python.analysis.inlayHints.pytestParameters": true, // Shows inlay hints for pytest parameters.
    "python.analysis.inlayHints.variableTypes": true, // Shows inlay hints for variable types.

    // =========================================================================
    // 18. Extension: LaTeX Workshop
    // In-depth configuration for building and viewing LaTeX documents.
    // =========================================================================
    "latex-workshop.latex.autoBuild.run": "never", // Disables automatic building on file change.
    "latex-workshop.showContextMenu": true, // Shows LaTeX Workshop-specific items in the context menu.
    "latex-workshop.intellisense.package.enabled": true, // Enables IntelliSense for LaTeX packages.
    "latex-workshop.message.error.show": false, // Hides popup messages on build errors.
    "latex-workshop.message.warning.show": false, // Hides popup messages on build warnings.
    "latex-workshop.latex.outDir": "%DIR%", // Sets the output directory to be the same as the root file's directory.
    "latex-workshop.latex.autoClean.run": "onFailed", // Cleans auxiliary files only after a failed build.
    "latex-workshop.latex.recipe.default": "lastUsed", // Uses the most recently used recipe as the default for the next build.
    "latex-workshop.view.pdf.viewer": "external", // Uses an external application to view the generated PDF.
    "latex-workshop.view.pdf.external.viewer.command": "okular", // Specifies 'okular' as the external PDF viewer.
    "latex-workshop.view.pdf.external.viewer.args": ["--unique", "%PDF%"], // Arguments to pass to the external viewer.
    "latex-workshop.view.pdf.external.synctex.command": "okular", // Command for reverse SyncTeX (PDF to source).
    "latex-workshop.view.pdf.external.synctex.args": ["--unique", "%PDF%#src:%LINE%%TEX%"], // Arguments for reverse SyncTeX.
    "latex-workshop.view.pdf.internal.synctex.keybinding": "double-click", // Sets double-click for forward SyncTeX in the internal viewer.
    "latex-workshop.view.pdf.ref.viewer": "auto", // Automatically selects the viewer for PDF references.
    "latex-workshop.formatting.latex": "latexindent", // Sets 'latexindent' as the formatter for LaTeX files.
    "latex-workshop.formatting.latexindent.path": "/usr/local/texlive/2025/bin/x86_64-linux/latexindent", // Path to the latexindent executable.
    "latex-workshop.formatting.latexindent.args": [
        // Arguments for the latexindent formatter.
        "-c",
        "%DIR%/",
        "%TMPFILE%",
        "-y=defaultIndent:'    '",
        "-l",
        "%WORKSPACE_FOLDER%/.latexindent.yaml",
        "-m",
        "-g=/dev/null"
    ],
    "latex-workshop.latex.tools": [
        // Defines the available LaTeX compilation tools.
        {
            "name": "xelatex",
            "command": "xelatex",
            "args": ["-synctex=1", "-interaction=nonstopmode", "-file-line-error", "%DOCFILE%"]
        },
        {
            "name": "pdflatex",
            "command": "pdflatex",
            "args": ["-synctex=1", "-interaction=nonstopmode", "-file-line-error", "%DOCFILE%"]
        },
        {
            "name": "latexmk",
            "command": "latexmk",
            "args": [
                "-synctex=1",
                "-interaction=nonstopmode",
                "-file-line-error",
                "-pdf",
                "-outdir=%OUTDIR%",
                "%DOCFILE%"
            ]
        },
        { "name": "bibtex", "command": "bibtex", "args": ["%DOCFILE%"] },
        { "name": "biber", "command": "biber", "args": ["%DOCFILE%"] }
    ],
    "latex-workshop.latex.recipes": [
        // Defines sequences of tools (recipes) for building documents.
        { "name": "XeLaTeX", "tools": ["xelatex"] },
        { "name": "XeLaTeX^2", "tools": ["xelatex", "xelatex"] },
        { "name": "PDFLaTeX", "tools": ["pdflatex"] },
        { "name": "BibTeX", "tools": ["bibtex"] },
        { "name": "LaTeXmk", "tools": ["latexmk"] },
        { "name": "XeLaTeX -> BibTeX -> XeLaTeX^2", "tools": ["xelatex", "bibtex", "xelatex", "xelatex"] },
        { "name": "XeLaTeX -> Biber -> XeLaTeX^2", "tools": ["xelatex", "biber", "xelatex", "xelatex"] },
        { "name": "PDFLaTeX -> BibTeX -> PDFLaTeX^2", "tools": ["pdflatex", "bibtex", "pdflatex", "pdflatex"] }
    ],
    "latex-workshop.latex.clean.fileTypes": [
        // Specifies file types to be removed by the 'Clean' command.
        "*.aux",
        "*.bbl",
        "*.blg",
        "*.idx",
        "*.ind",
        "*.lof",
        "*.lot",
        "*.out",
        "*.toc",
        "*.acn",
        "*.acr",
        "*.alg",
        "*.glg",
        "*.glo",
        "*.gls",
        "*.ist",
        "*.fls",
        "*.log",
        "*.fdb_latexmk",
        "*.synctex.gz"
    ],

    // =========================================================================
    // 19. Other Extension Settings
    // Configuration for various other extensions.
    // =========================================================================
    "prettier.tabWidth": 4, // Sets the tab width for Prettier to 4.
    "prettier.useTabs": false, // Configures Prettier to use spaces instead of tabs.
    "prettier.proseWrap": "preserve", // Tells Prettier to not wrap prose (like in Markdown).
    "prettier.bracketSameLine": true, // Puts the '>' of multi-line tags on the last line.
    "prettier.singleAttributePerLine": true, // Enforces one attribute per line in HTML/JSX/Vue.
    "emmet.triggerExpansionOnTab": true, // Enables expanding Emmet abbreviations with the Tab key.
    "emmet.showAbbreviationSuggestions": true, // Shows Emmet abbreviation suggestions.
    "emmet.showExpandedAbbreviation": "always", // Always shows a preview of the expanded Emmet abbreviation.
    "emmet.includeLanguages": { "vue-html": "html", "vue": "html", "wpy": "html" }, // Enables Emmet in additional languages.
    "cmake.configureOnOpen": true, // Automatically runs CMake configure when a project is opened.
    "cmake.additionalCompilerSearchDirs": ["/usr/bin"], // Additional directories to search for compilers.
    "cmake.generator": "Ninja", // Sets 'Ninja' as the CMake generator.
    "cmake.buildDirectory": "${workspaceFolder}/build", // Specifies the directory for build artifacts.
    "cmake.showNotAllDocumentsSavedQuestion": false, // Disables the prompt about unsaved files before configuring.
    "codesnap.backgroundColor": "#f2f2f2", // Sets the background color for CodeSnap screenshots.
    "codesnap.boxShadow": "5px 5px 60px 0px #888888", // Defines the box shadow for the screenshot container.
    "codesnap.containerPadding": "3em", // Sets the padding inside the screenshot container.
    "codesnap.roundedCorners": true, // Enables rounded corners for the screenshot.
    "codesnap.showWindowTitle": true, // Shows a window title bar in the screenshot.
    "codesnap.showLineNumbers": true, // Shows line numbers in the screenshot.
    "codesnap.realLineNumbers": true, // Uses the actual line numbers from the editor.
    "codesnap.transparentBackground": false, // Disables a transparent background.
    "codesnap.target": "container", // Configures CodeSnap to capture the container element.
    "css.format.spaceAroundSelectorSeparator": true, // Ensures spaces around CSS selector combinators (e.g., '>', '+').
    "java.format.settings.url": "/home/arshtyi/.vscode/extensions/redhat.java-1.41.1-win32-x64/formatters/eclipse-formatter.xml", // Path to an Eclipse XML file for Java formatting rules.
    "cph.general.defaultLanguage": "cpp", // Sets the default language for the Competitive Programming Helper extension.
    "cph.general.firstTime": false, // Indicates that CPH has been run before.
    "cph.language.cpp.Args": "-std=c++17 -O2", // Compiler arguments for C++ in CPH.
    "tinymist.formatterMode": "typstyle", // Sets the formatter mode for the Tinymist (Typst) extension.
    "tinymist.formatterIndentSize": 4, // Sets the indent size for the Tinymist formatter.
    "backgroundCover.imagePath": "", // Path to a background image for the editor (currently disabled).
    "backgroundCover.randomImageFolder": "f:\\pictures\\wallpaper", // Folder to source random background images from.
    "masmtasm.ASM.emulator": "dosbox", // Sets DOSBox as the emulator for the MASM/TASM extension.
    "masmtasm.ASM.assembler": "TASM", // Sets TASM as the assembler.
    "vsicons.dontShowNewVersionMessage": true, // Hides the new version message for the VSCode-Icons extension.
    "vscode-office.openOutline": false, // Disables automatically opening the outline for Office files.
    "vscode-office.editorTheme": "Auto", // Automatically sets the theme for the Office viewer.
    "redhat.telemetry.enabled": true // Enables telemetry data collection for Red Hat extensions.
}
